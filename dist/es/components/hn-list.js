import{$bundled$$$$$$$node_modules$$polymer$polymer$polymer$element}from'./hn-app.js';const{Element:Element}=$bundled$$$$$$$node_modules$$polymer$polymer$polymer$element;import{$bundled$$$$$$$node_modules$$polymer$polymer$lib$elements$dom$repeat}from'./hn-app.js';import{$bundled$$$$$$$node_modules$reselect$src$index}from'./hn-app.js';const{createSelector:createSelector}=$bundled$$$$$$$node_modules$reselect$src$index;import{$bundled$$$$reducers$location}from'./hn-app.js';const{splitPathnameSelector:splitPathnameSelector}=$bundled$$$$reducers$location;import{$bundled$$$$reducers$items}from'./hn-app.js';const{default:items,itemsSelector:itemsSelector}=$bundled$$$$reducers$items;import{$bundled$$$$reducers$favorites}from'./hn-app.js';const{default:favorites,favoritesSelector:favoritesSelector}=$bundled$$$$reducers$favorites;import{$bundled$$$$store}from'./hn-app.js';const{store:store}=$bundled$$$$store;import{$bundled$hn$summary}from'./hn-app.js';import{$bundled$$$$actions$favorites}from'./hn-app.js';const{loadFavorites:loadFavorites}=$bundled$$$$actions$favorites;import{$bundled$$$$$$$lib$connect$mixin}from'./hn-app.js';const{connect:connect}=$bundled$$$$$$$lib$connect$mixin;import{$bundled$shared$styles}from'./hn-app.js';const{sharedStyles:sharedStyles}=$bundled$shared$styles,REQUEST_LIST='REQUEST_LIST',RECEIVE_LIST='RECEIVE_LIST',FAIL_LIST='FAIL_LIST',fetchList=(d)=>(a)=>{a(requestList(d.id)),fetch(`/api/${d.id}`).then((b)=>b.json()).then((b)=>a(receiveList(d.id,b))).catch(()=>a(failList(d.id)))},fetchListIfNeeded=(c)=>(d)=>{!c||c.items||c.isFetching||d(fetchList(c))},requestList=(b)=>({type:REQUEST_LIST,listId:b}),receiveList=(c,d)=>({type:RECEIVE_LIST,listId:c,items:d}),failList=(b)=>({type:FAIL_LIST,listId:b});var _extends=Object.assign||function(e){for(var a,b=1;b<arguments.length;b++)for(var c in a=arguments[b],a)Object.prototype.hasOwnProperty.call(a,c)&&(e[c]=a[c]);return e};const lists=(d={},a)=>{switch(a.type){case REQUEST_LIST:case RECEIVE_LIST:case FAIL_LIST:const b=a.listId;return _extends({},d,{[b]:list(d[b],a)});default:return d;}},list=(c={},a)=>{switch(a.type){case REQUEST_LIST:return _extends({},c,{id:a.listId,failure:!1,isFetching:!0});case RECEIVE_LIST:return _extends({},c,{failure:!1,isFetching:!1,items:a.items.map((b)=>b.id)});case FAIL_LIST:return _extends({},c,{failure:!0,isFetching:!1});default:return c;}},listsSelector=(b)=>b.lists,currentListSelector=createSelector(listsSelector,favoritesSelector,splitPathnameSelector,(d,a,b)=>{switch(b[0]){case'':return d.news||{id:'news'};case'new':return d.newest||{id:'newest'};case'ask':case'show':case'jobs':return d[b[0]]||{id:b[0]};case'favorites':return{id:'favorites',items:Object.keys(a).map((b)=>parseInt(b,10))};default:return null;}}),currentItemsSelector=createSelector(currentListSelector,itemsSelector,(c,d)=>c&&c.items?c.items.map((b)=>d[b]||{id:b}):null);store.addReducers({lists,favorites,items}),store.dispatch(loadFavorites());class HnListElement extends connect(store)(Element){static get template(){return`
    ${sharedStyles}
    <button on-click="_reload">Reload</button>
    <dom-repeat items="[[items]]">
      <template>
        <hn-summary item="[[item]]" is-favorite="[[_isFavorite(favorites, item)]]"></hn-summary>
      </template>
    </dom-repeat>
    `}static get properties(){return{list:Object,favorites:Object,items:Array}}update(e){const a=currentListSelector(e);if(a){document.title=a.id;const f={favorites:e.favorites,list:a},c=currentItemsSelector(e);c&&(f.items=c),this.setProperties(f)}}_isFavorite(c,a){return!!(c&&a&&c[a.id])}_reload(){store.dispatch(fetchList(this.list))}}customElements.define('hn-list',HnListElement);export{HnListElement,currentListSelector,fetchListIfNeeded};